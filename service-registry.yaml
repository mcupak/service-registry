openapi: 3.0.0
info:
  title: Discovery Service Registry
  version: 1.0.0
  termsOfService: TBD
  license:
    name: GA4GH Service Registry
  contact:
    name: OICR
paths:
  /services:
    get:
      tags:
        - services
      summary: Get page of services
      parameters:
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page cursor.
          required: false
          schema:
            type: string
            example: 'NDMyNzQyODI3OTQw'
        - name: limit
          in: query
          description: The number of entries to be retrieved.
          required: false
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  paging:
                    $ref: '#/components/schemas/Paging'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - services
      summary: Register service into service registry
      parameters:
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRegistrationRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /services/types:
    get:
      tags:
        - services
      summary: List known service types
      parameters:
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/services/{serviceId}':
    get:
      tags:
        - services
      summary: Get service specified by UUID
      parameters:
        - name: serviceId
          in: path
          description: Service identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - services
      summary: Replace existing service
      parameters:
        - name: serviceId
          in: path
          description: Service identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRegistrationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - services
      summary: Deregister service specified by UUID from registry
      parameters:
        - name: serviceId
          in: path
          description: Service identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: authorization
          in: header
          description: The auth token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Paging:
      type: object
      properties:
        previous:
          type: string
          example: 'https://ga4gh-example-service.com?before=dXNlcjpVMEc5V0ZYTlo'
        next:
          type: string
          example: 'https://ga4gh-example-service.com?after=NDMyNzQyODI3OTQw'
        cursors:
          type: object
          properties:
            before:
              type: string
              example: 'dXNlcjpVMEc5V0ZYTlo'
            after:
              type: string
              example: 'NDMyNzQyODI3OTQw'
    ServiceType:
      type: string
      description: Indicates the type of the service.
      example: 'BEACON'
    Service:
      type: object
      description: Web server as a service
      properties:
        id:
          type: string
          format: uuid
          description: An identifier (UUID) unique to this service.
          example: '8087d255-1e38-45b6-a5ba-31e2bb50bdd3'
        name:
          type: string
          description: Name of service. It is recommended to be unique and unambiguous.
          example: 'GA4GH Service'
        url:
          type: string
          description: URL of the service (RFC 3986 format).
          example: 'https://foobar.com'
        type:
          $ref: '#/components/schemas/ServiceType'
        createdAt:
          type: string
          format: date-time
          description: Timestamp of service creation in RFC 3339.
          example: '2019-06-04T12:58:19Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of service modification in RFC 3339.
          example: '2019-06-04T12:58:19Z'
        contactUrl:
          type: string
          description: URL of the contact for the host/maintainer of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: 'mailto:support@example.com'
        description:
          type: string
          description: A human readable general description of this service.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: >-
            A set of key-value pairs that represent metadata specific to this
            service.
        aliases:
          type: array
          items:
            type: string
          description: A list of strings that can be used to tag the service.
          example: ["staging"]
    ServiceRegistrationRequest:
      type: object
      description: Service to be registered into registry
      properties:
        name:
          type: string
          description: Name of service. It is recommended to be unique and unambiguous.
          example: 'GA4GH Service'
        url:
          type: string
          description: URL of the service (RFC 3986 format).
          example: 'https://foobar.com'
        type:
          $ref: '#/components/schemas/ServiceType'
        contactUrl:
          type: string
          description: URL of the contact for the host/maintainer of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: 'mailto:support@example.com'
        description:
          type: string
          description: A human readable general description of this service.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: >-
            A set of key-value pairs that represent metadata specific to this
            service.
        aliases:
          type: array
          items:
            type: string
          description: A list of strings that can be used to tag the service.
      required:
        - name
        - url
        - type
    Error:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: '400'
        message:
          type: string
          description: Description of the error or information.
          example: 'Bad request'
        timestamp:
          type: string
          format: date-time
          description: Timestamp of service modification in RFC 3339.
          example: '2019-06-04T12:58:19Z'
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Code
                example: 'IllegalArgumentException'
              message:
                type: string
                description: Description of the error or information.
                example: 'Argument x must be greater than zero'